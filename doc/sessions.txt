*sessions.nvim*         a simple session autosaver

Author:  Nathan Craddock <https://nathancraddock.com>
Repo:    https://github.com/natecraddock/sessions.nvim
License: MIT

==============================================================================
INTRODUCTION                                                        *sessions*

sessions.nvim is a lightweight wrapper around `:mksession` that adds a small
amount of pixie dust to make sessions management more simple and enjoyable.

* The commands |:SessionsSave| and |:SessionsLoad| are used to save and load
  session files.
* Further changes to the session are automatically saved to the session file
  after saving or loading a session.
* Session files created with sessions.nvim are independent of the plugin;
  loading with `nvim -S` or `:source` will *not* start autosaving.
* Intermediate directories are automatically created.
* A default session filepath may be customized.

sessions.nvim does not do anything automatically. Sessions will not be saved or
loaded until a command or an API function is called. This is to keep the plugin
simple and focused. The entire goal of sessions.nvim is to provide a wrapper
around `:mksession` and `:source`, not to provide workspace management.

==============================================================================
CONFIGURATION                                         *sessions-configuration*

Call the setup function with a table as the argument to override the default
configuration.

require("session").setup({
    -- autocmd events which trigger a session save
    -- the default is to only save session files before exiting nvim.
    -- you may wish to also save more frequently by adding "BufEnter" or any
    -- other autocmd event
    events = { "VimLeavePre" },

    -- default session filepath (relative)
    -- if a path is provided here, then the path argument for commands and API
    -- functions will use session_filepath as a default if no path is provided.
    session_filepath = "",
})

==============================================================================
USAGE                                                         *sessions-usage*

:SessionsSave[!] [path]                                        *:SessionsSave*

Save a session file to the given path. If the path exists it will be
overwritten. Starts autosaving the session on the configured events.

If no path is provided, the configured default session path will be used if it
exists. If neither is provided, no session is saved. If ! is present, the
session will be saved, but autosaving will not be enabled.

:SessionsLoad[!] [path]                                        *:SessionsLoad*

Load a session file from the given path. If the path does not exist no session
will be loaded. Starts autosaving changes to the session after loading.

If no path is provided, the configured default session path will be used if it
exists. If neither is provided, no session is loaded. If ! is present, the
session will be loaded, but autosaving will not be enabled.

:SessionsStop[!]                                               *:SessionsStop*

  Stops session autosaving if enabled. The current state will be saved before
  stopping.

  If ! is present the current state will not be saved before stopping.

==============================================================================
API                                                             *sessions-api*

The session commands may also be accessed from Lua:

local sessions = require("sessions")

For all API functions the path has the same behavior as with commands. If nil
or empty the configured default path will be used.

sessions.save(path: string, opts: table)                     *sessions.save()*
sessions.load(path: string, opts: table)                     *sessions.load()*

Both |sessions.save()| and |sessions.load()| accept the same table of
options with the following defaults. >
    {
        -- start autosaving state to the session file
        autosave = true,

        -- set to true to disable warning and error messages
        silent = false,
    }
<

sessions.stop_autosave(opts: table)                 *sessions.stop_autosave()*

Default options. >
    {
        -- save the current state before stopping autosaving
        save = true,
    }
<
sessions.recording(): bool                              *sessions.recording()*

Returns true if session recording is enabled.

==============================================================================
EXTRA                                                         *sessions-extra*

See the plugin https://github.com/natecraddock/workspaces.nvim for an easy way
to integrate session management with saved workspace paths.

 vim:tw=78:ts=8:ft=help:norl:
